

☞ usedMemory1 ≔ 0.
☞ usedMemory2 ≔ 0.
☞ usedMemory3 ≔ 0.
☞ usedMemory4 ≔ 0.

Program tidiness: 0.

Number on: ‘addNum:’ do: { :x
	⛏ add: x.
}.

Number on: ‘subtractNum:’ do: { :x
	⛏ subtract: x.
}.

Number on: ‘multiplyBy:’ do: { :x
	⛏ multiply by: x.
}.

Number on: ‘divideBy:’ do: { :x
	⛏ divide by: x.
}.


☞ a ≔ 1.
a ≔ a + 1.
a addNum: 3.         
a ≔ a - 1.       
a subtractNum: -0.5. 
a ≔ a * 2.       
a divideBy: 3.    
a ≔ a / 0.1.     
a ≔ a - -1.      
a multiplyBy: 0.5.
a ≔ a + (2 power: 8).  
a ≔ a + (2 power: -1). 
a ≔ a + (49 square root).   
a addNum: ((List ← 0 ; 1) maximum).          
a addNum: ((List ← 2 ; 3) minimum).
✎ write: a.

Program clean memory.

usedMemory1 ≔ (Program memory ? 1).


a ≔ 1.
a ≔ a + 1.       
a addNum: 3.         
a ≔ a - 1.       
a subtractNum: -0.5. 
a ≔ a * 2.       
a divideBy: 3.    
a ≔ a / 0.1.     
a ≔ a - -1.      
a multiplyBy: 0.5.
a ≔ a + (2 power: 8).  
a ≔ a + (2 power: -1). 
a ≔ a + (49 square root).   
a addNum: ((List ← 0 ; 1) maximum).          
a addNum: ((List ← 2 ; 3) minimum).
✎ write: a.

Program clean memory.
usedMemory2 ≔ (Program memory ? 1).


a ≔ 1.
a ≔ a + 1.       
a addNum: 3.         
a ≔ a - 1.       
a subtractNum: -0.5. 
a ≔ a * 2.       
a divideBy: 3.    
a ≔ a / 0.1.     
a ≔ a - -1.      
a multiplyBy: 0.5.
a ≔ a + (2 power: 8).  
a ≔ a + (2 power: -1). 
a ≔ a + (49 square root).   
a addNum: ((List ← 0 ; 1) maximum).          
a addNum: ((List ← 2 ; 3) minimum).
✎ write: a.

Program clean memory.
usedMemory3 ≔ (Program memory ? 1).



( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) true: {
	✎ write: ‘No memory leaks here’.
}, false: {
	✎ write: ‘Leaking memory...’.
}.

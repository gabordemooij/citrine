☞ makeAdder := { :x
	☞ f := { :y ↲ (⚿ x + y). } set: ‘x’ value: x. 
	↲ f.
}.
☞ mapper := { :array :func
	☞ mapping := { :i ⚿ q put: (⚿ f apply: (⚿ q ? i)) at: i. } 
	set: ‘q’ value: array,
	set: ‘f’ value: func.
	{ :i mapping apply: i. } * (array count).
}.

☞ a := List ← 1; 2; 3.
mapper apply: a and: (makeAdder apply: 100).
✎ write: (a position: 1), stop.
✎ write: (a ? 2), stop.
✎ write: (a ? 3), stop.



Program tidiness: 1.

☞ x := 0.
☞ y := ‘Hello’.
☞ q := { ‘’. }.
☞ p := True.
☞ a := List ← 1 ; 2 ; 3 ; 4.
☞ c := Object new.
c on: ‘greet:’ do: { ✎ write: ‘greet!’. }.

☞ usedMemory1 := 0.
☞ usedMemory2 := 0.
☞ usedMemory3 := 0.
☞ usedMemory4 := 0.
☞ usedMemory5 := 0.

Program clean memory.
☞ usedMemory1 := (Program memory ? 1).




x := 1.
y := ‘Hello’.
q := { ‘’. }.
p := True.
a := List ← 1 ; 2 ; 3 ; 5.
c := Object new.
c on: ‘greet:’ do: { ✎ write: ‘greet!’. }.


Program clean memory.
☞ usedMemory2 := (Program memory ? 1).




x := 2.
y := ‘Hello’.
q := { ‘’. }.
p := True.
a := List ← 1 ; 2 ; 3 ; 4.
c := Object new.
c on: ‘greet:’ do: { ✎ write: ‘greet!’. }.

Program clean memory.
☞ usedMemory3 := (Program memory ? 1).




x := 3.
y := ‘Hello’.
q := { ‘’. }.
p := True.
a := List ← 1 ; 2 ; 3 ; 5.
c := Object new.
c on: ‘greet:’ do: { ✎ write: ‘greet!’. }.
c := Object new.
c on: ‘greet:’ do: { ✎ write: ‘a different greet!’, stop. }.


Program clean memory.
☞ usedMemory4 := (Program memory ? 1).





x := 4.
y := ‘Hello’.
q := { ‘’. }.
p := True.
a := List ← 1 ; 2 ; 3 ; 4.
c := Object new.
c on: ‘greet:’ do: { ✎ write: ‘greet!’. }.


Program clean memory.
☞ usedMemory5 := (Program memory ? 1).




(usedMemory1 = usedMemory2 = usedMemory3 = usedMemory4 = usedMemory5) true: { 
	✎ write: ‘Memory usage remains stable.’, stop.
}, else: {
	✎ write: ‘Used memory not stable.’, stop.
}.

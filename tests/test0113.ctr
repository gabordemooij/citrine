#Test continue message
Pen write: 'Continue for-loop, No - before 6 and up.', brk.
1 to: 10 by: 1 do: { i |
	Pen write: i, brk.
	(i > 4) continue.
	Pen write: '-'.
}.

x := 0.
xIsLessThan10 := {\ ^( x < 10 ). }.
#0-4
Pen brk.
Pen write: 'Continue while-true, No --> before 5 and up.', brk.
xIsLessThan10 whileTrue: {\
	Pen write: 'iteration #' + x, brk.
	x add: 1.
	((x < 5) not) continue.
	Pen write: '-->'.
}.

#5,4
Pen brk.
Pen write: 'Continue while-false, No - before 3 only.', brk.
{\ ^(x=0). } whileFalse: {\
	Pen write: 'iteration #' + x, brk.
	x subtract: 1.
	(x = 3) continue.
	Pen write: '-'.
}.

#1-4
Pen brk.
Pen write: 'Continue times-loop, No ||| before 3.', brk.
5 times: { i |
	Pen write: 'iteration #' + i, brk.
	(i = 2) continue.
	Pen write: '|||'.
}.

Pen brk.

#nothing should happen, no error
{\ True continue. Pen write: 'dont write this!', brk. } run.

#nothing should happen, no error
{\ True continue. Pen write: 'dont write this!', brk. } catch: {\ Pen write: 'Dont catch this!'. }, run.

#test each-loops
Pen write: 'Test Array each-loop: 0, ... ,2', brk.
(Array <- 1 ; 2 ; 3) map: { i |
	(i = 1) continue.
	Pen write: 'iteration #' + i, brk.
}.

Pen write: 'Test Map each-loop: c only', brk.
m := Map new.
m put: 'first' at: 'a', put: 'second' at: 'b', put: 'third' at: 'c'.
m each: { k v |
	(k != 'c') continue.
	Pen write: 'iteration' + k + v, brk.
}.


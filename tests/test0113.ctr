✎ write: ‘Continue for-loop, No - before 6 and up.’, stop.
{ :i
	i subtract: 1.
	✎ write: (i + 1), stop.
	((i + 1) > 4) continue.
	✎ write: ‘-’.
} × 10.

☞ x ≔ 0.
☞ xIsLessThan10 ≔ { ↲( x < 10 ). }.
✎ stop.
✎ write: ‘Continue while-true, No --> before 5 and up.’, stop.
{
	✎ write: ‘iteration #’ + x, stop.
	x add: 1.
	((x < 5) not) continue.
	✎ write: ‘-->’.
} while: xIsLessThan10.
✎ stop.
✎ write: ‘Continue while-false, No - before 3 only.’, stop.
{
	✎ write: ‘iteration #’ + x, stop.
	x subtract: 1.
	(x = 3) continue.
	✎ write: ‘-’.
} while: { ↲ ( x > 0). }.

✎ stop.
✎ write: ‘Continue times-loop, No ||| before 3.’, stop.
{ :i
	i subtract: 1.
	✎ write: ‘iteration #’ + i, stop.
	(i = 2) continue.
	✎ write: ‘|||’.
} × 5.

✎ stop.

{ True continue. ✎ write: ‘dont write this!’, stop. } run.

{ True continue. ✎ write: ‘dont write this!’, stop. } catch: { ✎ write: ‘Dont catch this!’. }, run.

✎ write: ‘Test Array each-loop: 0, ... ,2’, stop.
(List ← 1 ; 2 ; 3) map: { :i
	((i - 1) = 1) continue.
	✎ write: ‘iteration #’ + (i - 1), stop.
}.

✎ write: ‘Test Map each-loop: c only’, stop.
☞ m ≔ Map new.
m put: ‘first’ at: ‘a’, put: ‘second’ at: ‘b’, put: ‘third’ at: ‘c’.
m each: { :k :v
	(k ≠ ‘c’) continue.
	✎ write: ‘iteration’ + k + v, stop.
}.


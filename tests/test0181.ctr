

☞ usedMemory1 ≔ 0.
☞ usedMemory2 ≔ 0.
☞ usedMemory3 ≔ 0.
☞ usedMemory4 ≔ 0.

Program tidiness: 0.

☞ txt ≔ ‘World Salad’.
✎ write: ‘this text contains: ’ + ( ( txt split: ‘ ’ ) count ) + ‘ words.’, stop.
txt ≔ txt from: 7 length: 4.
✎ write: txt, stop.

Program clean memory.

usedMemory1 ≔ (Program memory ? 1).


txt ≔ ‘World Salad’.
✎ write: ‘this text contains: ’ + ( ( txt split: ‘ ’ ) count ) + ‘ words.’, stop.
txt ≔ txt from: 7 length: 4.
✎ write: txt, stop.

Program clean memory.
usedMemory2 ≔ (Program memory ? 1).


txt ≔ ‘World Salad’.
✎ write: ‘this text contains: ’ + ( ( txt split: ‘ ’ ) count ) + ‘ words.’, stop.
txt ≔ txt from: 7 length: 4.
✎ write: txt, stop.

Program clean memory.
usedMemory3 ≔ (Program memory ? 1).



( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) true: {
	✎ write: ‘No memory leaks here’.
}, false: {
	✎ write: ‘Leaking memory...’.
}.

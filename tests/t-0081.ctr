>> map1 := Dict new.
>> key1 := List new.
>> key2 := List new.

map1
	put: ['hello'] at: key1,
	put: ['world'] at: key2.


Out
	write: ['Map #1 contains: '] + (map1 at: key1),
	write: [' and '] + (map1 at: key2), stop.

>> KeyeableArray := List new.
KeyeableArray on: ['toString'] do: { <- (self count) toString.
}.

>> map2 := Dict new.
key1 := KeyeableArray new.
key2 := KeyeableArray new.

key1 append: 1.

map2
	put: ['hello'] at: key1,
	put: ['world'] at: key2.

Out
	write: ['Map #2 contains: '] + (map2 at: key1),
	write: [' and '] + (map2 at: key2), stop.

☞ Slurp := Object new.
Slurp on: ‘new’ do: {
	⚿ str := ‘’.
}.
Slurp learn: ‘nieuw’ means: ‘new’.
Slurp on: ‘respond:’ do: { :blah
		(⚿ str ≠ ‘’) true: {
			⚿ str append: ‘ ’.
		}.
		⚿ str append: blah.
}.
Slurp on: ‘respond:and:’ do: { :blah :blahah
		(⚿ str ≠ ‘’) true: {
			⚿ str append: ‘ ’.
		}.
		(blah length > 1) true: {
			⚿ str append: (blah from: 0 length: (blah length - 1)).
		}, else: {
			⚿ str append: blah.
		}.
		⚿ str append: ‘ ’.
		⚿ str append: blahah.
}.
Slurp on: ‘obtain’ do: {
	☞ buffer := ⚿ str.
	⚿ str := ‘’.
	↲ buffer.
}.

Program shell:
	(Slurp new
		touch: ‘/tmp/blah.txt;’,
		chmod uog-w: ‘/tmp/blah.txt’,
	obtain).

{
	☞ file := File new: ‘/tmp/blah.txt’.
	file write: ‘hello’.
} catch: { :error 
	✎ write: error, stop.
}, run.

	
Program shell: (
	Slurp new chmod uog-r: ‘/tmp/blah.txt’, obtain
).

{
	☞ file := File new: ‘/tmp/blah.txt’.
	file read.
} catch: { :error 
	✎ write: error, stop.
}, run.



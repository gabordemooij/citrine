>> usedMemory1 := 0.
>> usedMemory2 := 0.
>> usedMemory3 := 0.
>> usedMemory4 := 0.

Program memory-management: 0.

>> a := False.
>> b := True.
>> c := (a and: b).
>> d := (a xor: b).
>> e := (a or: b).
>> f := (a ! b).
>> g := a either: ['x'] or: ['y'].
>> h := ['-'] + g.

Program clean-up.
usedMemory1 := (Program memory ? 0).

>> a := False.
>> b := True.
>> c := (a and: b).
>> d := (a xor: b).
>> e := (a or: b).
>> f := (a ! b).
>> g := a either: ['x'] or: ['y'].
>> h := ['-'] + g.

Program clean-up.
usedMemory2 := (Program memory ? 0).

>> a := False.
>> b := True.
>> c := (a and: b).
>> d := (a xor: b).
>> e := (a or: b).
>> f := (a ! b).
>> g := a either: ['x'] or: ['y'].
>> h := ['-'] + g.

Program clean-up.
usedMemory3 := (Program memory ? 0).

( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) true: {
	Out write: ['No memory leaks here'].
}, false: {
	Out write: ['Leaking memory...'].
}.

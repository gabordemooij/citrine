

>> usedMemory1 := 0.
>> usedMemory2 := 0.
>> usedMemory3 := 0.
>> usedMemory4 := 0.

>> x := 100.

Program memory-management: 0.

{
>> txt := ['hello '] + ['world'].
txt := txt + [' - can we use strings.. '].
txt := txt + ['without leaking '] + x + ['s of bytes ?'].
txt append: ['!!'].
Out write: txt.
} start.

Program clean-up.

usedMemory1 := (Program memory ? 0).


{
>> txt := ['hello '] + ['world'].
txt := txt + [' - can we use strings.. '].
txt := txt + ['without leaking '] + x + ['s of bytes ?'].
txt append: ['!!'].
Out write: txt.
} start.

Program clean-up.
usedMemory2 := (Program memory ? 0).


{
>> txt := ['hello '] + ['world'].
txt := txt + [' - can we use strings.. '].
txt := txt + ['without leaking '] + x + ['s of bytes ?'].
txt append: ['!!'].
Out write: txt.
} start.

Program clean-up.
usedMemory3 := (Program memory ? 0).



( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) true: {
	Out write: ['No memory leaks here'].
}, false: {
	Out write: ['Leaking memory...'].
}.

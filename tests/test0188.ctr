

☞ usedMemory1 ≔ 0.
☞ usedMemory2 ≔ 0.
☞ usedMemory3 ≔ 0.
☞ usedMemory4 ≔ 0.

Program tidiness: 0.

{ :i i subtract: 1. ✎ write: i. } × 4.
✎ stop.
{ :i i subtract: 1. ✎ write: (4 - i). } × 4.
✎ stop.
( 1 > 2 ) false: { ✎ write: ‘BLOCK 1’, stop. }.
( 2 > 1 ) true:  { ✎ write: ‘BLOCK 2’, stop. }.

☞ i ≔ 0.
{ ✎ write: i. i add: 1. } while: { ↲( i < 3). }.
✎ stop.

i ≔ 3.
{ ✎ write: i. i ≔ i - 1. } while: { ↲( i > 0). }.
✎ stop.


Program clean memory.

usedMemory1 ≔ (Program memory ? 1).


{ :i i subtract: 1. ✎ write: i. } × 4.
✎ stop.
{ :i i subtract: 1. ✎ write: (4 - i). } × 4.
✎ stop.
( 1 > 2 ) false: { ✎ write: ‘BLOCK 1’, stop. }.
( 2 > 1 ) true:  { ✎ write: ‘BLOCK 2’, stop. }.

☞ i ≔ 0.
{ ✎ write: i. i add: 1. } while: { ↲( i < 3). }.
✎ stop.

i ≔ 3.
{ ✎ write: i. i ≔ i - 1. } while: { ↲( i > 0). }.
✎ stop.



Program clean memory.
usedMemory2 ≔ (Program memory ? 1).


{ :i i subtract: 1. ✎ write: i. } × 4.
✎ stop.
{ :i i subtract: 1. ✎ write: (4 - i). } × 4.
✎ stop.
( 1 > 2 ) false: { ✎ write: ‘BLOCK 1’, stop. }.
( 2 > 1 ) true:  { ✎ write: ‘BLOCK 2’, stop. }.

☞ i ≔ 0.
{ ✎ write: i. i add: 1. } while: { ↲( i < 3). }.
✎ stop.

i ≔ 3.
{ ✎ write: i. i ≔ i - 1. } while: { ↲( i > 0). }.
✎ stop.

Program clean memory.
usedMemory3 ≔ (Program memory ? 1).



( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) true: {
	✎ write: ‘No memory leaks here’.
}, false: {
	✎ write: ‘Leaking memory...’.
}.

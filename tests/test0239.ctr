‘SINGLE_LANGUAGE’.

List on: ‘sum’ do: {
	☞ total ≔ 0.
	⛏ each: { :index :element
		total add: element.
	}.
	↲ total.
}.

☞ a ≔ True.



a on: ‘string’ do: {
	☞ answer ≔ Nil.
	( ⛏ = True ) true: {
		answer ≔ ‘Yep’.
	}, else: {
		answer ≔ ‘Nope’.
	}.
	↲ answer.
}.

a on: ‘number’ do: {
	☞ answer ≔ Nil.
	( ⛏ = True ) true: {
		answer ≔ 10.
	}, else: {
		answer ≔ 20.
	}.
	↲ answer.
}.

☞ b ≔ 666.

b on: ‘string’ do: {
	↲ ‘Devil’.
}.

b on: ‘boolean’ do: {
	↲ False.
}.


✎ write: a, stop.  
✎ write: (90 + a), stop. 
✎ write: b, stop. 
✎ write: (True and: b), stop.

a ≔ List ← ‘hello’ ; ‘world’ ; True ; Nil ; 666. 
a ≔ a + ( List ← 1 ).
✎ write: a, stop.
✎ write: ((Map new) put: Nil at: Nil), stop.
✎ write: a sum, stop. 


{
	a on: ‘string’ do: { ↲ Nil. }.
	a ≔ ‘’ + a.
} catch: { :error
	✎ write: ‘Error noted: ’ + error, stop.
}, run.



{
	a on: ‘number’ do: { ↲ Nil. }.
	a ≔ 3 × a.
} catch: { :error
	✎ write: ‘Error noted: ’ + error, stop.
}, run.


{
	a on: ‘boolean’ do: { ↲ Nil. }.
	a ≔ True and: a. 
} catch: { :error
	✎ write: ‘Error noted: ’ + error, stop.
}, run.





{
	a on: ‘string’ do: { ↲ False. }.
	a ≔ ‘’ + a.
} catch: { :error
	✎ write: ‘Error noted: ’ + error, stop.
}, run.



{
	a on: ‘number’ do: { ↲ True. }.
	a ≔ 3 × a.
} catch: { :error
	✎ write: ‘Error noted: ’ + error, stop.
}, run.


{
	a on: ‘boolean’ do: { ↲ 1. }.
	a ≔ True and: a.
} catch: { :error
	✎ write: ‘Error noted: ’ + error, stop.
}, run.





{
	a on: ‘string’ do: { ↲ 1. }.
	a ≔ ‘’ + a.
} catch: { :error
	✎ write: ‘Error noted: ’ + error, stop.
}, run.



{
	a on: ‘number’ do: { ↲ ‘’. }.
	a ≔ 3 × a.
} catch: { :error
	✎ write: ‘Error noted: ’ + error, stop.
}, run.


{
	a on: ‘boolean’ do: { ↲ ‘’. }.
	a ≔ True and: a.
} catch: { :error
	✎ write: ‘Error noted: ’ + error, stop.
}, run.






{
	a on: ‘string’ do: { ↲ (Map new). }.
	a ≔ ‘’ + a. 
} catch: { :error
	✎ write: ‘Error noted: ’ + error, stop.
}, run.



{
	a on: ‘number’ do: { ↲ (Object new). }.
	a ≔ 3 × a. 
} catch: { :error
	✎ write: ‘Error noted: ’ + error, stop.
}, run.


{
	a on: ‘boolean’ do: { ↲ (Object new). }.
	a ≔ True and: a.
} catch: { :error
	✎ write: ‘Error noted: ’ + error, stop.
}, run.


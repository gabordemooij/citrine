

☞ usedMemory1 ≔ 0.
☞ usedMemory2 ≔ 0.
☞ usedMemory3 ≔ 0.
☞ usedMemory4 ≔ 0.

Program tidiness: 0.

✎ write: (6 < 5), stop.
✎ write: (2 > 1), stop.
✎ write: (2 ≤ 1), stop.
✎ write: (9 ≥ 1), stop.
✎ write: (2 odd?), stop.
✎ write: (4 even?), stop.
✎ write: (-1 positive?), stop.
✎ write: (-2 negative?), stop.
✎ write: ((3 ≥ 4) & (3 ≤ 5)), stop.
✎ write: (3 = 3), stop.
✎ write: (3 ≠ 3), stop.
✎ write: 1 boolean, stop.

Program clean memory.

usedMemory1 ≔ (Program memory ? 1).


✎ write: (6 < 5), stop.
✎ write: (2 > 1), stop.
✎ write: (2 ≤ 1), stop.
✎ write: (9 ≥ 1), stop.
✎ write: (2 odd?), stop.
✎ write: (4 even?), stop.
✎ write: (-1 positive?), stop.
✎ write: (-2 negative?), stop.
✎ write: ((3 ≥ 4) & (3 ≤ 5)), stop.
✎ write: (3 = 3), stop.
✎ write: (3 ≠ 3), stop.
✎ write: 1 boolean, stop.

Program clean memory.
usedMemory2 ≔ (Program memory ? 1).


✎ write: (6 < 5), stop.
✎ write: (2 > 1), stop.
✎ write: (2 ≤ 1), stop.
✎ write: (9 ≥ 1), stop.
✎ write: (2 odd?), stop.
✎ write: (4 even?), stop.
✎ write: (-1 positive?), stop.
✎ write: (-2 negative?), stop.
✎ write: ((3 ≥ 4) & (3 ≤ 5)), stop.
✎ write: (3 = 3), stop.
✎ write: (3 ≠ 3), stop.
✎ write: 1 boolean, stop.

Program clean memory.
usedMemory3 ≔ (Program memory ? 1).



( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) true: {
	✎ write: ‘No memory leaks here’.
}, false: {
	✎ write: ‘Leaking memory...’.
}.

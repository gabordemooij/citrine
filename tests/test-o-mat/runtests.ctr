Program use: Path Test-o-Mat Package.
Program use: Path Configuration.

☞ counter ≔ 0.
☞ file counter ≔ 1.
☞ variation counter ≔ 1.
☞ doing a single run ≔ False.
☞ doing a single language ≔ False.
☞ last file ≔ Nil.
☞ OS ≔ Program setting: ‘OS’.
Tests path: base path for tests, record: (Program argument: 3) = ‘rec’.

Tests on: ‘next’ do: {

	doing a single run true: {
		doing a single run ≔ False.
		counter add: variations count - 1.
	}.

	(doing a single language and: ((counter modulo: variations count) = 6)) true: {
		doing a single language ≔ False.
		counter add: variations count - 6.
	}.

	☞ file no ≔ 1 + (counter ÷ variations count) floor.
	☞ test ≔ Nil.

	(file no ≤ number of tests) true: {

		☞ file name ≔ ‘testX.ctr’ X (file no digits: 4).
		☞ path ≔ ‘../’ + file name.
		☞ variation ≔ variations position: ((counter modulo: variations count) + 1).

		test ≔ Test new
			number: counter copy,
			name: file name,
			file: (File new: path).

		☞ tag ≔ variation.

		doing a single run      ≔ (test directive contains: ‘SINGLE_RUN’).
		doing a single language ≔ (test directive contains: ‘SINGLE_LANGUAGE’).

		(test directive contains: ‘NL-ONLY’) true: {
			doing a single run ≔ True.
			tag ≔ ‘nl-only’.
		}.

		test tag: tag.
		counter add: 1.

	}.
	↲ test.
}.

☞ test suite ≔ Tests new.
test suite on: ‘process:’ do: { :test

	(last file = test file path string) false: {
		last file ≔ test file path string.
		✎ write: (‘↵Running: NO.↵’ NO: last file).
	}.

	☞ actions ≔ Tests actions on: ‘edit:’ do: { :text
		(List ← 1 ; 2 ; 4 ; 8 ; 9 ; 12) each: { :index :code
			text replace: (‘tmp/runnerCODE:’ CODE: code) with: ‘tmp/runner0:’.
		}.
		(List ← 24 ; 48 ; 56 ; 64) each: { :index :bytes
			text replace: (‘Failed to allocate XX bytes.’ XX: bytes) with: ‘Failed to allocate XX bytes.’.
		}.
		↲ text remove surrounding spaces.
	}.

	☞ action ≔ Nil.
	☞ tag ≔ test tags first.
	☞ skip translation ≔ False.
	(tag string contains: ‘-only’) true: {
		tag ≔ tag - ‘-only’.
		skip translation ≔ True.
	}.
	☞ test input ≔
			Action new
			name: Path echo,
			options: ‘"test"’.

	(memory management modes find: tag) true: {
		actions append: ( Tests action
			command: Path echo,
			options: ‘"Program tidiness: TAG."’,
			output: Path tests tmp runnerTAG,
			TAG:    tag ),
		append: ( Tests action
			command: Path cat,
			options: test file path,
			append: Path tests tmp runnerTAG,
			TAG:    tag ),
		append: ( Tests action
			input:  test input,
			name:   Path bin OS ctrISO,
			target: Path tests tmp runnerTAG,
			output: Path tests tmp outTAG,
			log:    Path tests tmp logTAG,
			OS:    OS,
			TAG:   tag,
			ISO:   ‘xx’ ),
		expect: Path tests exp ISO NAME,
		ISO: ‘xx2’,
		NAME: (test name),
		ctr: ‘exp’,
		run or fail: (‘[✓NUMTAG]’ NUM: test number, TAG: tag).
	}.

	(languages find: tag) true: {

		(skip translation) true: {
			actions append: ( Tests action
				command: Path cat,
				options: test file path,
				output: Path tests tmp runnerTAG,
				TAG:   tag ).
		}, else: {
			actions append: ( Tests action
				name: Path bin OS ctrxx,
				option: ‘-t’ file: ‘dict/xxISO.dict’,
				target: Path tests tmp runner0,
				output: Path tests tmp runnerISO,
				log:    Path tests tmp terrorlogISO,
				OS:    OS,
				ISO:   tag ).
		}.

		actions append: ( Tests action
			input:  test input,
			name:   Path bin OS ctrTAG,
			target: Path tests tmp runnerTAG,
			output: Path tests tmp outTAG,
			log:    Path tests tmp logTAG,
			OS:    OS,
			TAG:   tag ),
			expect: Path tests exp ISO NAME,
			ISO: tag,
			NAME: (test name from: 0 length: 8) + tag + ‘.exp’,
			run or fail: (‘[✓NUMTAG]’ NUM: test number, TAG: tag).

		((one way languages find: tag) boolean or: skip translation) false: {
			actions append: ( Tests action
				name: Path bin OS ctrISO,
				option: ‘-t’ file: ‘dict/ISOxx.dict’,
				target: Path tests tmp runnerISO,
				output: Path tests tmp runnerXX,
				log:    Path tests tmp terrorlogXX,
				OS:    OS,
				ISO:   tag ),
			append:( Tests action
				input:  test input,
				name:   Path bin OS ctrxx,
				target: Path tests tmp runnerXX,
				output: Path tests tmp outXX,
				log:    Path tests tmp logXX,
				OS:    OS ),
				expect: Path tests exp xx NAME,
				NAME: (test name from: 0 length: 8) + ‘xx.exp’,
				run or fail: (‘[✓NUMTAG]’ NUM: test number, TAG: tag).
		}.
	}.
}.
test suite run.



>> usedMemory1 := 0.
>> usedMemory2 := 0.
>> usedMemory3 := 0.
>> usedMemory4 := 0.

Program memory-management: 0.

>> txt := ['Word Salad'].
Out write: ( txt copy from: 5 length: 5 ).
Out write: ( txt copy offset: 5, trim ), stop.

Program clean-up.

usedMemory1 := (Program memory ? 0).


txt := ['Word Salad'].
Out write: ( txt copy from: 5 length: 5 ).
Out write: ( txt copy offset: 5, trim ), stop.

Program clean-up.
usedMemory2 := (Program memory ? 0).


txt := ['Word Salad'].
Out write: ( txt copy from: 5 length: 5 ).
Out write: ( txt copy offset: 5, trim ), stop.

Program clean-up.
usedMemory3 := (Program memory ? 0).



( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) true: {
	Out write: ['No memory leaks here'].
}, false: {
	Out write: ['Leaking memory...'].
}.

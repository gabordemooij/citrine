Programma geheugen: 500.000.000.

☞ tĳdstip     ≔ Moment nieuw.
☞ tĳd         ≔ tĳdstip tĳd ruw.
☞ datum       ≔ “jaartal-maandnummer-dagnummer uur:minuut” 
					jaartal:     tĳdstip jaar ruw,
					maandnummer: tĳdstip maand,
					dagnummer:   tĳdstip dag,
					uur:         tĳdstip uur,
					minuut:      tĳdstip minuut.

☞ ontwerp     ≔ Bestand nieuw: “template.html”, lezen.
☞ woordenboek ≔ Bestand nieuw: “dict.txt”, lezen opsplitsen: “↵”.
☞ handleiding ≔ Lĳst nieuw.
☞ broncode    ≔ “”.

Programma opdrachtregel: “rm server/mdocs/*/*.html”.

broncode toevoegen: (Bestand nieuw: “../plugins/media/media.c”,        lezen).

☞ talen   ≔ Reeks nieuw.
☞ blokken ≔ broncode opsplitsen: “@def”.
blokken afschuiven.
☞ totaal  ≔ blokken aantal.


Tekst bĳ: “html” doen: {
	
	☞ html ≔ ⛏ tekst kopieer.
	html vervang: “&” door: “&amp;”.
	html vervang: “"” door: “&quot;”.
	html vervang: “<” door: “&lt;”.
	html vervang: “>” door: “&gt;”.
	html vervang: “↵” door: “<br>”.
	↲ html.
}.

Bestand reeks: “../plugins/media/i18nsel”, elk: { :nummer :taalinformatie
	☞ taal ≔ taalinformatie bestand.
	taal = “..” of: taal = “.”, doorgaan.
	handleiding zet: (Reeks nieuw) bĳ: taal.
	talen toevoegen: taal.
}.

talen sorteren: { :a :b ↲ a > b. }.

blokken elk: { :nummer :blok

	✎ schrĳf: (
		“Bezig met blok: 🠶bloknummer van: 🠶totaal.↵”
		🠶bloknummer: nummer,
		🠶totaal: totaal
	).

	☞ blokinhoud    ≔ blok opsplitsen: “*/”, eerste.
	
	blokinhoud
	vervang: “↵ *” door: “↵”,
	vervang: “ *↵” door: “↵”.
	
	☞ blokdelen     ≔ blokinhoud opsplitsen: “@example”.
	☞ definitie     ≔ blokdelen eerste verwĳder omliggende spaties.
	☞ voorbeeld     ≔ blokdelen laatste verwĳder omliggende spaties.
	☞ resultaat     ≔ “”.
	☞ resultaat?    ≔ voorbeeld bevat: “@result”.

	(blokdelen aantal < 2) doorgaan.
	
	resultaat? ja: {
		voorbeeld ≔ voorbeeld opsplitsen: “@result”.
		resultaat ≔ voorbeeld laatste.
		voorbeeld ≔ voorbeeld eerste.
	}.

	talen elk: { :nummer :taalinformatie
	
		☞ taal ≔ taalinformatie bestand.
		
		☞ definitiebestand ≔ Bestand nieuw: (“/tmp/mdoc🠶taal/def.ctr” 🠶taal: taal).
		☞ codebestand      ≔ Bestand nieuw: (“/tmp/mdoc🠶taal/code.ctr” 🠶taal: taal).

		definitiebestand schrĳf: definitie.
		codebestand schrĳf: voorbeeld.

		☞ commando ≔ 
		“mkdir /tmp/mdoc🠶taal”.
		commando 🠶taal: taal.
		Programma opdrachtregel: commando.

		☞ commando ≔ 
		“../bin/Linux/ctren -t ../plugins/media/dict/en🠶taal.dict /tmp/mdoc🠶taal/def.ctr 2>/dev/null”.
		commando 🠶taal: taal.
		✎ schrĳf: commando, stop.
		
		☞ vertaalde definitie ≔ Programma opdrachtregel: commando.
		commando ≔ 
		“../bin/Linux/ctren -t ../plugins/media/dict/en🠶taal.dict /tmp/mdoc🠶taal/code.ctr 1>/tmp/mdoc🠶taal/run.ctr 2>/dev/null”.
		commando 🠶taal: taal.
		Programma opdrachtregel: commando.
				
		commando ≔ “cp -R ../dist/Linux/ISO/🠶taal/mods /tmp/mdoc🠶taal/mods”.
		commando 🠶taal: taal.
		Programma opdrachtregel: commando.

		
		☞ vertaalde code ≔ Bestand nieuw: (“/tmp/mdoc🠶taal/run.ctr” 🠶taal: taal), lezen.
		
		resultaat? nee: {
			commando ≔ “cp ../bin/Linux/ctr🠶taal /tmp/mdoc🠶taal/ctr ; cd /tmp/mdoc🠶taal/ ; ./ctr /tmp/mdoc🠶taal/run.ctr 2>>/tmp/mdoc🠶taal/err.log”.
			commando 🠶taal: taal.
			resultaat ≔ Programma opdrachtregel: commando.
		}.

		commando ≔ “echo "🠶code" | sha1sum”.
		commando 🠶code: ( taal + vertaalde definitie ).
		☞ link ≔ Programma opdrachtregel: commando, opsplitsen: “ ”, eerste.

		☞ hoofdstuk ≔ Reeks nieuw
		• vertaalde definitie
		• vertaalde code
		• resultaat
		• link.
		☞ x ≔ handleiding bĳ: taal, toevoegen: hoofdstuk.
	}.
}.

☞ taalregister ≔ “”.
talen elk: { :nummer :taal

	☞ eerste hoofdstuk ≔ handleiding bĳ: taal, eerste.
	☞ link ≔ eerste hoofdstuk laatste.
	☞ regel ≔ “<li><a href="/mdocs/🠶taal/🠶link.html" >🠶taal</a></li>”.

	regel
	🠶taal: taal,
	🠶link: link.

	taalregister toevoegen: regel.
	☞ commando ≔ 
	“mkdir -p server/docs/🠶taal”.
	commando 🠶taal: taal.

	Programma opdrachtregel: commando.
}.

handleiding elk: { :taal :hoofdstukken

	☞ inhoudsopgave ≔ “”.
	hoofdstukken elk: { :nummer :onderdelen

		☞ link ≔ onderdelen laatste.
		☞ titel ≔ onderdelen eerste.
		☞ regel ≔ “<li><a href="/mdocs/🠶taal/🠶link.html" >🠶titel</a></li>”.
		regel
			🠶taal: taal,
			🠶link: link,
			🠶titel: titel.
		inhoudsopgave toevoegen: regel.
	}.

	hoofdstukken elk: { :nummer :onderdelen
	
		☞ resultaat ≔ onderdelen positie: 3, verwĳder omliggende spaties.
		☞ vertaalbaar ≔ resultaat zoek: “en:”.
	
		
		vertaalbaar ja: {
			✎ schrĳf: vertaalbaar, stop.
			✎ schrĳf: woordenboek, stop.
			✎ schrĳf: resultaat, stop.
			☞ vertaal ≔ resultaat opsplitsen: “↵”, eerste.
			☞ taalgrens ≔ 0.
			✎ schrĳf: vertaal, stop.
			☞ regelnummer ≔ 0.
			woordenboek elk: { :i :zin
				✎ schrĳf: zin, stop.
				vertaal = zin ja: {
					✎ schrĳf: i, stop.
					regelnummer ≔ i.
				}.
				((taalgrens = 0) en: (zin zoek: (“🠶taal:” 🠶taal: taal))) ja: {
					taalgrens ≔ i.
					✎ schrĳf: (“Taalgrens = xx” xx: i), stop.
				}.
				((taalgrens > 0) en: ((i - taalgrens) = regelnummer)) ja: {
					✎ schrĳf: “--gevonden--”, stop.
					✎ schrĳf: zin, stop.
				
					resultaat ≔ (zin vervang: (“🠶taal:” 🠶taal: taal) door: “”).
				}.
			}.
			
			
			
		}.
	

		☞ document ≔ ontwerp kopieer.
		document
			🠶datum: datum,
			🠶tĳd: tĳd,
			🠶taalregister: taalregister,
			🠶taal: taal,
			🠶titeltaal: taal kopieer hoofdletters,
			🠶hoofdstuk: onderdelen eerste html,
			🠶voorbeeld: (onderdelen positie: 2) html,
			🠶resultaat: (resultaat html vervang: “[[” door: “<img src="/img/media/”, vervang: “]]” door: “.png" alt="">”),
			🠶inhoudsopgave: inhoudsopgave.

		☞ bestandslocatie ≔ “server/mdocs/🠶taal/🠶link.html”.
		bestandslocatie
			🠶taal: taal,
			🠶link: onderdelen laatste.

		✎ schrĳf: bestandslocatie, stop.
		Bestand nieuw: bestandslocatie, schrĳf: document.
	}.
}.
